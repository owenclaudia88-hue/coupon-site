// app/api/lead/route.ts
import { NextResponse } from 'next/server'
import { put } from '@vercel/blob'

export const runtime = 'edge' // keep Edge: we use fetch to Brevo (SDK isn't edge-compatible)

type LeadBody = {
  email?: string
  offerId?: string
  store?: string
  ts?: number
  firstName?: string
  lastName?: string
}

const isEmail = (v: string) => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(v)

// --- Simple spintax expander (Edge-safe) ---
function expandSpintax(input: string): string {
  let str = input
  const pattern = /\{([^{}]+)\}/
  while (pattern.test(str)) {
    str = str.replace(pattern, (_, inner) => {
      const parts = inner.split('|')
      return parts[Math.floor(Math.random() * parts.length)]
    })
  }
  return str
}

function escapeHtml(s: string) {
  return s
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
}

// --- SWEDISH SPINTAX (MAIN + REMINDER) ---

const SPINTAX_SUBJECT_MAIN = `{Exklusivt|Speciellt|Begr√§nsat tillf√§lle|Grattis!|Du har blivit utvald till ett|Missa inte detta} iPhone 17 Pro Max {erbjudande|deal|rabatt|bel√∂ning} ‚Äî {f√∂r att fira v√•r flaggskeppsbutik|f√∂r att fira v√•r nya butik i Stockholm|som en del av v√•r stora √∂ppning i Stockholm|tillg√§ngligt endast via v√•rt partnern√§tverk} üéâ`

const SPINTAX_BODY_MAIN = `{B√§sta Elgiganten-kund,|Elgiganten-kund,|B√§sta v√§rderade kund,|B√§sta kund,|B√§sta Elgiganten-klient,|B√§sta v√§rdefulla kund,|B√§sta smartphone-entusiast,|V√§rderade kund,|V√§rderade klient,|Hej,|Hej d√§r,}

{Tack f√∂r att du registrerade dig via en av v√•ra betrodda partnersajter.|Vi √§r glada att du har g√•tt med oss genom en av v√•ra partnerplattformar.|Tack f√∂r att du anm√§lde dig via en av v√•ra partnersidor.|Vi uppskattar att du gick med oss via v√•rt partnern√§tverk.}  
{Vi samarbetar med utvalda partners f√∂r att kunna erbjuda de mest exklusiva erbjudandena,|Genom att samarbeta med ledande sajter kan vi dela oslagbara deals,|Med v√•ra betrodda partners kan vi leverera unika rabatter,} och idag {har vi n√•got speciellt reserverat f√∂r dig.|√§r vi glada att dela ett unikt tillf√§lle.|har du l√•st upp en exklusiv bel√∂ning.}

---

{F√∂r att fira √∂ppningen av v√•r flaggskeppsbutik i Stockholm ger vi tidig tillg√•ng till en exklusiv iPhone 17 Pro Max-rabatt.|Som en del av v√•r nya butikslansering i Stockholm kan du nu ta del av en partner-exklusiv rabatt p√• iPhone 17 Pro Max.|Vi firar v√•r senaste butik i Stockholm med ett tidsbegr√§nsat erbjudande p√• iPhone 17 Pro Max, reserverat f√∂r partneranv√§ndare.|V√•r stora √∂ppning i Stockholm kommer med en bel√∂ning: tidig tillg√•ng till iPhone 17 Pro Max till specialpris.}

{Din iPhone 17 Pro Max √§r reserverad, men du m√•ste bekr√§fta dina uppgifter inom 48 timmar f√∂r att h√§mta den.|Vi har lagt undan en enhet √•t dig, men du beh√∂ver fylla i leveransinformationen inom 48 timmar.|Erbjudandet √§r tidsk√§nsligt, s√• se till att bekr√§fta din best√§llning snart.|V√§nta inte ‚Äì denna partner-exklusiva bel√∂ning l√∂per ut om den inte g√∂rs anspr√•k p√• snabbt.}

---

üëâ {S√§kra din iPhone 17 Pro Max nu|H√§mta ditt exklusiva iPhone 17 Pro Max-erbjudande|L√•s upp din iPhone 17 Pro Max-rabatt|Bekr√§fta din bel√∂ning idag|Ta del av erbjudandet nu} genom att bes√∂ka en av dessa l√§nkar:  

{http://bit.ly/4gF6Gje
|https://bit.ly/3InCcFG
|https://bit.ly/48sgGtQ
|https://bit.ly/3IrWQ7w
|https://bit.ly/4nc5beu
|https://tinyurl.com/cd58a8w
|https://tinyurl.com/5aphht4b
|https://tinyurl.com/r7j5utdj
|https://tinyurl.com/bp5wnra8
|https://tinyurl.com/yc63mu8v}

---

{Detta erbjudande g√§ller endast under en begr√§nsad tid och endast via v√•rt partnern√§tverk, s√• v√§nta inte f√∂r l√§nge.|Skynda dig ‚Äì detta partnerexklusiva erbjudande varar inte l√§nge.|Agera snabbt ‚Äì begr√§nsat antal finns tillg√§ngligt genom denna partnerkampanj.|Vi kan bara h√•lla din reservation en kort tid, s√• agera nu.|N√§r 48 timmar har g√•tt sl√§pps din reserverade iPhone till n√§sta kund.}

---

{Tack igen f√∂r att du √§r en del av v√•r community och firar denna viktiga milstolpe med oss.|Vi √§r tacksamma f√∂r din lojalitet och ser fram emot att v√§lkomna dig snart i v√•ra butiker.|Tack f√∂r att du firar med oss n√§r vi expanderar i Sverige.|Ditt st√∂d g√∂r v√•r tillv√§xt m√∂jlig och detta √§r v√•rt s√§tt att ge tillbaka.|Vi √§r stolta √∂ver att r√§kna dig som en av v√•ra mest v√§rdefulla kunder.}

{Med v√§nliga h√§lsningar,|V√§nliga h√§lsningar,|Varma h√§lsningar,|Med uppskattning,|Med tack,|H√§lsningar,}  
**{Elgigantens Smartphone-team|Elgigantens Kundsupport|Elgigantens T√§vlingsavdelning|Elgiganten Sverige|Elgigantens Onlineavdelning|Elgigantens Kundrelationer|Elgigantens Online-team}**`

const SPINTAX_SUBJECT_REM = `{P√•minnelse|Sista chansen|Missa inte|Sista p√•minnelsen|Snabb p√•minnelse}: iPhone 17 Pro Max {erbjudande|rabatt|deal} ‚Äî {slutar snart|g√•r ut snart|sista timmarna} ‚è≥`

const SPINTAX_BODY_REM = `{B√§sta Elgiganten-kund,|Elgiganten-kund,|B√§sta v√§rderade kund,|B√§sta kund,|B√§sta Elgiganten-klient,|B√§sta v√§rdefulla kund,|B√§sta smartphone-entusiast,|V√§rderade kund,|V√§rderade klient,|Hej,|Hej d√§r,}

{En snabb p√•minnelse om ditt exklusiva iPhone 17 Pro Max-erbjudande.|Din partner-exklusiva iPhone 17 Pro Max-rabatt √§r fortfarande tillg√§nglig ‚Äì men inte l√§nge till.|En liten heads-up: din iPhone 17 Pro Max-deal h√•ller p√• att g√• ut.}  
{N√§r vi firar v√•r nya flaggskeppsbutik i Stockholm,|Till √§ra av v√•r nya butik i Stockholm,|F√∂r att markera lanseringen av v√•r flaggskeppsbutik i Stockholm,} {reserverade vi tillg√•ng f√∂r partnerkunder som dig.|fick du tidig tillg√•ng via v√•rt partnern√§tverk.|l√•ste du upp prioriterad tillg√•ng genom v√•ra partners.}

{Det finns begr√§nsat med tid kvar f√∂r att bekr√§fta dina uppgifter|Endast en kort tidsram √•terst√•r f√∂r att h√§mta erbjudandet|Vi √§r nere p√• de sista reservationerna}, {s√• agera nu|s√• g√∂r anspr√•k p√• det innan det √§r f√∂r sent|innan f√∂nstret st√§ngs}.

üëâ {H√§mta din iPhone 17 Pro Max nu|L√•s upp din exklusiva rabatt|S√§kra ditt erbjudande|Bekr√§fta din bel√∂ning}:
{http://bit.ly/4gF6Gje
|https://bit.ly/3InCcFG
|https://bit.ly/48sgGtQ
|https://bit.ly/3IrWQ7w
|https://bit.ly/4nc5beu
|https://tinyurl.com/cd58a8w
|https://tinyurl.com/5aphht4b
|https://tinyurl.com/r7j5utdj
|https://tinyurl.com/bp5wnra8
|https://tinyurl.com/yc63mu8v}

{Detta √§r en tidsbegr√§nsad partnerkampanj ‚Äì n√§r den √§r borta √§r den borta.|Vi kan bara h√•lla din reservation en kort stund ‚Äì slutf√∂r den nu.|Sista p√•minnelsen: efter detta sl√§pps din reserverade enhet.}

{Med v√§nliga h√§lsningar,|V√§nliga h√§lsningar,|Varma h√§lsningar,|Med uppskattning,|H√§lsningar,}  
**{Elgigantens Smartphone-team|Elgigantens Kundsupport|Elgigantens T√§vlingsavdelning|Elgiganten Sverige|Elgigantens Onlineavdelning|Elgigantens Kundrelationer|Elgigantens Online-team}**

{PS: Denna p√•minnelse skickades eftersom du registrerade dig via en partnersajt.|PS: Du f√•r denna p√•minnelse genom din registrering i v√•rt partnern√§tverk.|PS: Du kan ignorera detta meddelande om du redan har gjort anspr√•k p√• erbjudandet.}`

export async function POST(req: Request) {
  try {
    const { email, offerId, store, ts, firstName, lastName }: LeadBody = await req.json()

    if (!email || !isEmail(email)) {
      return NextResponse.json({ ok: false, error: 'bad_email' }, { status: 400 })
    }
    if (!process.env.BLOB_READ_WRITE_TOKEN) {
      return NextResponse.json({ ok: false, error: 'no_blob_token' }, { status: 500 })
    }

    // ---- Save lead to Blob (kept exactly as your current logic) ----
    const ip = (req.headers.get('x-forwarded-for') || '').split(',')[0] || null
    const ua = req.headers.get('user-agent') || null

    const normalizedEmail = email.trim().toLowerCase()
    const payload = JSON.stringify({
      email: normalizedEmail,
      offerId: offerId || null,
      store: store || null,
      ts: ts || Date.now(),
      ip,
      ua,
    })

    const day = new Date().toISOString().slice(0, 10) // YYYY-MM-DD
    const key = `leads/${day}/${crypto.randomUUID()}.json`

    await put(key, payload, {
      access: 'public', // you set this intentionally; keep as-is
      contentType: 'application/json',
      token: process.env.BLOB_READ_WRITE_TOKEN,
    })

    // ---- Email scheduling ----
    const apiKey = process.env.BREVO_API_KEY
    const fromEmail = process.env.BREVO_SENDER_EMAIL || 'olivia@elgigantensupport.online'
    const fromName  = process.env.BREVO_SENDER_NAME  || 'Olivia'

    if (!apiKey) {
      console.warn('BREVO_API_KEY missing ‚Äî lead stored but email not scheduled.')
      return NextResponse.json({ ok: true, leadKey: key, emailScheduled: false })
    }

    // Allow override for testing (e.g., /api/lead?delayMin=2&reminderHours=1)
    const url = new URL(req.url)
    const delayMin = Math.max(0, Number(url.searchParams.get('delayMin') ?? '15')) // default 15 minutes
    const reminderHours = Math.max(1, Number(url.searchParams.get('reminderHours') ?? '24')) // default 24 hours

    const sendAtWelcome = new Date(Date.now() + delayMin * 60 * 1000).toISOString()
    const sendAtReminder = new Date(Date.now() + reminderHours * 60 * 60 * 1000).toISOString()

    // Expand spintax for both emails (subject + body)
    const subjectWelcome = expandSpintax(SPINTAX_SUBJECT_MAIN)
    const bodyWelcome = expandSpintax(SPINTAX_BODY_MAIN)

    const subjectReminder = expandSpintax(SPINTAX_SUBJECT_REM)
    const bodyReminder = expandSpintax(SPINTAX_BODY_REM)

    // Minimal HTML wrapper (keeps line breaks)
    const htmlWelcome = `<pre style="font-family:Arial,Helvetica,sans-serif;white-space:pre-wrap;line-height:1.55;margin:0;">${escapeHtml(bodyWelcome)}</pre>`
    const htmlReminder = `<pre style="font-family:Arial,Helvetica,sans-serif;white-space:pre-wrap;line-height:1.55;margin:0;">${escapeHtml(bodyReminder)}</pre>`

    // Helper to send via Brevo
    async function sendBrevoEmail(subject: string, htmlContent: string, sendAtISO: string, ref: string) {
      return fetch('https://api.brevo.com/v3/smtp/email', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'api-key': apiKey!,
        },
        body: JSON.stringify({
          sender: { email: fromEmail, name: fromName },
          to: [{ email: normalizedEmail, name: [firstName, lastName].filter(Boolean).join(' ') || normalizedEmail }],
          subject,
          htmlContent,
          headers: { 'X-Entity-Ref-ID': `${ref}-${key}` },
          sendAt: sendAtISO,
        }),
      })
    }

    // Send welcome (scheduled)
    const resWelcome = await sendBrevoEmail(subjectWelcome, htmlWelcome, sendAtWelcome, 'welcome')
    let welcomeOk = resWelcome.ok
    if (!welcomeOk) {
      const txt = await resWelcome.text().catch(() => '')
      console.error('Brevo welcome schedule error:', resWelcome.status, txt)
    }

    // Send reminder (scheduled +24h by default)
    const resReminder = await sendBrevoEmail(subjectReminder, htmlReminder, sendAtReminder, 'reminder')
    let reminderOk = resReminder.ok
    if (!reminderOk) {
      const txt = await resReminder.text().catch(() => '')
      console.error('Brevo reminder schedule error:', resReminder.status, txt)
    }

    // Try to parse Brevo responses (ignore failures)
    const brevoWelcome = welcomeOk ? await resWelcome.json().catch(() => ({})) : null
    const brevoReminder = reminderOk ? await resReminder.json().catch(() => ({})) : null

    return NextResponse.json({
      ok: true,
      leadKey: key,
      emailScheduled: welcomeOk,
      reminderScheduled: reminderOk,
      sendAtWelcome,
      sendAtReminder,
      brevoWelcome,
      brevoReminder,
    })
  } catch (err: any) {
    console.error('lead error:', err)
    return NextResponse.json({ ok: false, error: err?.message || 'unknown' }, { status: 500 })
  }
}
